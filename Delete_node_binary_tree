DELETE a NODE in a Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sucessor(TreeNode* root)
    {
        root=root->right;
        while(root!=NULL&&root->left!=NULL)
        {
            root=root->left;
        }
        return root;

    }
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==NULL)
        {
            return root;
        }
        if(root->val<key)
        {
            root->right=deleteNode(root->right,key);
        }
        else if(root->val>key)
        {
            root->left=deleteNode(root->left,key);
        }
        else
        {//here it means the key if found here
            //this root has our required key
            //3 cases may possible that key has 0,one,two child
            if(root->left==NULL)
            {
                TreeNode* temp=root->right;
                delete(root);
                return temp;
            }
            else if(root->right==NULL)
            {
                TreeNode* temp=root->left;
                delete(root);
                return temp;
            }
            else
            {
                //here the req root is 3 so it has both child
                //We need to replace the next suceesor to it so lets copt the sucessor here 
                TreeNode* succ=sucessor(root);
                root->val=succ->val;
                root->right=deleteNode(root->right,succ->val);
            }
        }

      return root;  
        
    }
};
